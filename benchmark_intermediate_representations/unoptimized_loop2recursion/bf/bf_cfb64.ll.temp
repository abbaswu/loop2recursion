; ModuleID = './benchmark_intermediate_representations/baseline/bf/bf_cfb64.ll'
source_filename = "./benchmark_intermediate_representations/baseline/bf/bf_cfb64.ll"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32 }
%1 = type { i32 }
%struct.bf_key_st = type { [18 x i64], [1024 x i64] }

; Function Attrs: nounwind uwtable
define void @BF_cfb64_encrypt(i8* nocapture readonly %in, i8* nocapture %out, i64 %length, %struct.bf_key_st* %schedule, i8* %ivec, i32* nocapture %num, i32 %encrypt) #0 {
entry:
  %ti = alloca <2 x i64>, align 16
  %tmpcast = bitcast <2 x i64>* %ti to [2 x i64]*
  %0 = load i32, i32* %num, align 4, !tbaa !1
  %1 = bitcast <2 x i64>* %ti to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #3
  %tobool = icmp eq i32 %encrypt, 0
  %dec68247 = add nsw i64 %length, -1
  %tobool69248 = icmp eq i64 %length, 0
  br i1 %tobool, label %while.cond67.preheader, label %while.cond.preheader

while.cond.preheader:                             ; preds = %entry
  br i1 %tobool69248, label %if.end151, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %incdec.ptr = getelementptr inbounds i8, i8* %ivec, i64 1
  %incdec.ptr3 = getelementptr inbounds i8, i8* %ivec, i64 2
  %incdec.ptr6 = getelementptr inbounds i8, i8* %ivec, i64 3
  %incdec.ptr10 = getelementptr inbounds i8, i8* %ivec, i64 4
  %arrayidx = getelementptr inbounds <2 x i64>, <2 x i64>* %ti, i64 0, i64 0
  %incdec.ptr13 = getelementptr inbounds i8, i8* %ivec, i64 5
  %incdec.ptr16 = getelementptr inbounds i8, i8* %ivec, i64 6
  %incdec.ptr20 = getelementptr inbounds i8, i8* %ivec, i64 7
  %arrayidx27 = getelementptr inbounds [2 x i64], [2 x i64]* %tmpcast, i64 0, i64 1
  br label %"BF_cfb64_encrypt$1_initialize_context"

"BF_cfb64_encrypt$1_initialize_context":          ; preds = %while.body.lr.ph
  %2 = alloca %0, align 8
  br label %"BF_cfb64_encrypt$1_call_recursive_function"

"BF_cfb64_encrypt$1_call_recursive_function":     ; preds = %"BF_cfb64_encrypt$1_initialize_context"
  call void @"BF_cfb64_encrypt$1"(%0* %2, i8* %out, i8* %in, i64 %dec68247, i32 %0, i64* %arrayidx27, %struct.bf_key_st* %schedule, i64* %arrayidx, <2 x i64>* %ti, i8* %incdec.ptr20, i8* %incdec.ptr16, i8* %incdec.ptr, i8* %incdec.ptr6, i8* %incdec.ptr3, i8* %incdec.ptr13, i8* %ivec, i8* %incdec.ptr10)
  br label %"BF_cfb64_encrypt$1_extract_return_values$0"

"BF_cfb64_encrypt$1_extract_return_values$0":     ; preds = %"BF_cfb64_encrypt$1_call_recursive_function"
  %3 = getelementptr %0, %0* %2, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  br label %if.end151.loopexit263

while.cond67.preheader:                           ; preds = %entry
  br i1 %tobool69248, label %if.end151, label %while.body70.lr.ph

while.body70.lr.ph:                               ; preds = %while.cond67.preheader
  %incdec.ptr74 = getelementptr inbounds i8, i8* %ivec, i64 1
  %incdec.ptr77 = getelementptr inbounds i8, i8* %ivec, i64 2
  %incdec.ptr81 = getelementptr inbounds i8, i8* %ivec, i64 3
  %incdec.ptr85 = getelementptr inbounds i8, i8* %ivec, i64 4
  %arrayidx88 = getelementptr inbounds <2 x i64>, <2 x i64>* %ti, i64 0, i64 0
  %incdec.ptr89 = getelementptr inbounds i8, i8* %ivec, i64 5
  %incdec.ptr92 = getelementptr inbounds i8, i8* %ivec, i64 6
  %incdec.ptr96 = getelementptr inbounds i8, i8* %ivec, i64 7
  %arrayidx103 = getelementptr inbounds [2 x i64], [2 x i64]* %tmpcast, i64 0, i64 1
  br label %"BF_cfb64_encrypt$0_initialize_context"

"BF_cfb64_encrypt$0_initialize_context":          ; preds = %while.body70.lr.ph
  %5 = alloca %1, align 8
  br label %"BF_cfb64_encrypt$0_call_recursive_function"

"BF_cfb64_encrypt$0_call_recursive_function":     ; preds = %"BF_cfb64_encrypt$0_initialize_context"
  call void @"BF_cfb64_encrypt$0"(%1* %5, i8* %in, i64 %dec68247, i8* %out, i32 %0, i64* %arrayidx103, %struct.bf_key_st* %schedule, <2 x i64>* %ti, i8* %incdec.ptr96, i64* %arrayidx88, i8* %incdec.ptr74, i8* %incdec.ptr92, i8* %ivec, i8* %incdec.ptr81, i8* %incdec.ptr77, i8* %incdec.ptr85, i8* %incdec.ptr89)
  br label %"BF_cfb64_encrypt$0_extract_return_values$0"

"BF_cfb64_encrypt$0_extract_return_values$0":     ; preds = %"BF_cfb64_encrypt$0_call_recursive_function"
  %6 = getelementptr %1, %1* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  br label %if.end151.loopexit

if.end151.loopexit:                               ; preds = %"BF_cfb64_encrypt$0_extract_return_values$0"
  br label %if.end151

if.end151.loopexit263:                            ; preds = %"BF_cfb64_encrypt$1_extract_return_values$0"
  br label %if.end151

if.end151:                                        ; preds = %if.end151.loopexit263, %if.end151.loopexit, %while.cond67.preheader, %while.cond.preheader
  %n.2 = phi i32 [ %0, %while.cond67.preheader ], [ %0, %while.cond.preheader ], [ %7, %if.end151.loopexit ], [ %4, %if.end151.loopexit263 ]
  store i32 %n.2, i32* %num, align 4, !tbaa !1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1) #3
  ret void
}

declare void @BF_encrypt(i64*, %struct.bf_key_st*, i32) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

define void @"BF_cfb64_encrypt$0"(%1* %0, i8* %1, i64 %2, i8* %3, i32 %4, i64* %5, %struct.bf_key_st* %6, <2 x i64>* %7, i8* %8, i64* %9, i8* %10, i8* %11, i8* %12, i8* %13, i8* %14, i8* %15, i8* %16) {
"BF_cfb64_encrypt$0_header":
  %cmp71 = icmp eq i32 %4, 0
  br i1 %cmp71, label %if.then73, label %"BF_cfb64_encrypt$0_latch$0"

if.then73:                                        ; preds = %"BF_cfb64_encrypt$0_header"
  %17 = load i8, i8* %12, align 1, !tbaa !5
  %18 = load i8, i8* %10, align 1, !tbaa !5
  %19 = load i8, i8* %14, align 1, !tbaa !5
  %20 = load i8, i8* %13, align 1, !tbaa !5
  %21 = load i8, i8* %15, align 1, !tbaa !5
  %22 = insertelement <2 x i8> undef, i8 %17, i32 0
  %23 = insertelement <2 x i8> %22, i8 %21, i32 1
  %24 = zext <2 x i8> %23 to <2 x i64>
  %25 = shl nuw nsw <2 x i64> %24, <i64 24, i64 24>
  %26 = load i8, i8* %16, align 1, !tbaa !5
  %27 = insertelement <2 x i8> undef, i8 %18, i32 0
  %28 = insertelement <2 x i8> %27, i8 %26, i32 1
  %29 = zext <2 x i8> %28 to <2 x i64>
  %30 = shl nuw nsw <2 x i64> %29, <i64 16, i64 16>
  %31 = or <2 x i64> %30, %25
  %32 = load i8, i8* %11, align 1, !tbaa !5
  %33 = insertelement <2 x i8> undef, i8 %19, i32 0
  %34 = insertelement <2 x i8> %33, i8 %32, i32 1
  %35 = zext <2 x i8> %34 to <2 x i64>
  %36 = shl nuw nsw <2 x i64> %35, <i64 8, i64 8>
  %37 = or <2 x i64> %31, %36
  %38 = load i8, i8* %8, align 1, !tbaa !5
  %39 = insertelement <2 x i8> undef, i8 %20, i32 0
  %40 = insertelement <2 x i8> %39, i8 %38, i32 1
  %41 = zext <2 x i8> %40 to <2 x i64>
  %42 = or <2 x i64> %37, %41
  store <2 x i64> %42, <2 x i64>* %7, align 16, !tbaa !6
  call void @BF_encrypt(i64* %9, %struct.bf_key_st* %6, i32 1) #3
  %43 = load i64, i64* %9, align 16, !tbaa !6
  %shr106 = lshr i64 %43, 24
  %conv108 = trunc i64 %shr106 to i8
  store i8 %conv108, i8* %12, align 1, !tbaa !5
  %shr110 = lshr i64 %43, 16
  %conv112 = trunc i64 %shr110 to i8
  store i8 %conv112, i8* %10, align 1, !tbaa !5
  %shr114 = lshr i64 %43, 8
  %conv116 = trunc i64 %shr114 to i8
  store i8 %conv116, i8* %14, align 1, !tbaa !5
  %conv119 = trunc i64 %43 to i8
  store i8 %conv119, i8* %13, align 1, !tbaa !5
  %44 = load i64, i64* %5, align 8, !tbaa !6
  %shr122 = lshr i64 %44, 24
  %conv124 = trunc i64 %shr122 to i8
  store i8 %conv124, i8* %15, align 1, !tbaa !5
  %shr126 = lshr i64 %44, 16
  %conv128 = trunc i64 %shr126 to i8
  store i8 %conv128, i8* %16, align 1, !tbaa !5
  %shr130 = lshr i64 %44, 8
  %conv132 = trunc i64 %shr130 to i8
  store i8 %conv132, i8* %11, align 1, !tbaa !5
  %conv135 = trunc i64 %44 to i8
  store i8 %conv135, i8* %8, align 1, !tbaa !5
  br label %"BF_cfb64_encrypt$0_latch$0"

"BF_cfb64_encrypt$0_latch$0":                     ; preds = %if.then73, %"BF_cfb64_encrypt$0_header"
  %incdec.ptr138 = getelementptr inbounds i8, i8* %1, i64 1
  %45 = load i8, i8* %1, align 1, !tbaa !5
  %idxprom139 = sext i32 %4 to i64
  %arrayidx140 = getelementptr inbounds i8, i8* %12, i64 %idxprom139
  %46 = load i8, i8* %arrayidx140, align 1, !tbaa !5
  store i8 %45, i8* %arrayidx140, align 1, !tbaa !5
  %xor145244 = xor i8 %46, %45
  %incdec.ptr147 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %xor145244, i8* %3, align 1, !tbaa !5
  %add148 = add nsw i32 %4, 1
  %and149 = and i32 %add148, 7
  %dec68 = add nsw i64 %2, -1
  %tobool69 = icmp eq i64 %2, 0
  br i1 %tobool69, label %"BF_cfb64_encrypt$0_return_from_recursive_function$0", label %"BF_cfb64_encrypt$0_increment_depth_counter"

"BF_cfb64_encrypt$0_increment_depth_counter":     ; preds = %"BF_cfb64_encrypt$0_latch$0"
  br label %"BF_cfb64_encrypt$0_recursively_call_function"

"BF_cfb64_encrypt$0_recursively_call_function":   ; preds = %"BF_cfb64_encrypt$0_increment_depth_counter"
  call void @"BF_cfb64_encrypt$0"(%1* %0, i8* %incdec.ptr138, i64 %dec68, i8* %incdec.ptr147, i32 %and149, i64* %5, %struct.bf_key_st* %6, <2 x i64>* %7, i8* %8, i64* %9, i8* %10, i8* %11, i8* %12, i8* %13, i8* %14, i8* %15, i8* %16)
  ret void

"BF_cfb64_encrypt$0_return_from_recursive_function$0": ; preds = %"BF_cfb64_encrypt$0_latch$0"
  %47 = getelementptr %1, %1* %0, i32 0, i32 0
  store i32 %and149, i32* %47, align 4
  ret void
}

define void @"BF_cfb64_encrypt$1"(%0* %0, i8* %1, i8* %2, i64 %3, i32 %4, i64* %5, %struct.bf_key_st* %6, i64* %7, <2 x i64>* %8, i8* %9, i8* %10, i8* %11, i8* %12, i8* %13, i8* %14, i8* %15, i8* %16) {
"BF_cfb64_encrypt$1_header":
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then2, label %"BF_cfb64_encrypt$1_latch$0"

if.then2:                                         ; preds = %"BF_cfb64_encrypt$1_header"
  %17 = load i8, i8* %15, align 1, !tbaa !5
  %18 = load i8, i8* %11, align 1, !tbaa !5
  %19 = load i8, i8* %13, align 1, !tbaa !5
  %20 = load i8, i8* %12, align 1, !tbaa !5
  %21 = load i8, i8* %16, align 1, !tbaa !5
  %22 = insertelement <2 x i8> undef, i8 %17, i32 0
  %23 = insertelement <2 x i8> %22, i8 %21, i32 1
  %24 = zext <2 x i8> %23 to <2 x i64>
  %25 = shl nuw nsw <2 x i64> %24, <i64 24, i64 24>
  %26 = load i8, i8* %14, align 1, !tbaa !5
  %27 = insertelement <2 x i8> undef, i8 %18, i32 0
  %28 = insertelement <2 x i8> %27, i8 %26, i32 1
  %29 = zext <2 x i8> %28 to <2 x i64>
  %30 = shl nuw nsw <2 x i64> %29, <i64 16, i64 16>
  %31 = or <2 x i64> %30, %25
  %32 = load i8, i8* %10, align 1, !tbaa !5
  %33 = insertelement <2 x i8> undef, i8 %19, i32 0
  %34 = insertelement <2 x i8> %33, i8 %32, i32 1
  %35 = zext <2 x i8> %34 to <2 x i64>
  %36 = shl nuw nsw <2 x i64> %35, <i64 8, i64 8>
  %37 = or <2 x i64> %31, %36
  %38 = load i8, i8* %9, align 1, !tbaa !5
  %39 = insertelement <2 x i8> undef, i8 %20, i32 0
  %40 = insertelement <2 x i8> %39, i8 %38, i32 1
  %41 = zext <2 x i8> %40 to <2 x i64>
  %42 = or <2 x i64> %37, %41
  store <2 x i64> %42, <2 x i64>* %8, align 16, !tbaa !6
  call void @BF_encrypt(i64* %7, %struct.bf_key_st* %6, i32 1) #3
  %43 = load i64, i64* %7, align 16, !tbaa !6
  %shr = lshr i64 %43, 24
  %conv29 = trunc i64 %shr to i8
  store i8 %conv29, i8* %15, align 1, !tbaa !5
  %shr31 = lshr i64 %43, 16
  %conv33 = trunc i64 %shr31 to i8
  store i8 %conv33, i8* %11, align 1, !tbaa !5
  %shr35 = lshr i64 %43, 8
  %conv37 = trunc i64 %shr35 to i8
  store i8 %conv37, i8* %13, align 1, !tbaa !5
  %conv40 = trunc i64 %43 to i8
  store i8 %conv40, i8* %12, align 1, !tbaa !5
  %44 = load i64, i64* %5, align 8, !tbaa !6
  %shr43 = lshr i64 %44, 24
  %conv45 = trunc i64 %shr43 to i8
  store i8 %conv45, i8* %16, align 1, !tbaa !5
  %shr47 = lshr i64 %44, 16
  %conv49 = trunc i64 %shr47 to i8
  store i8 %conv49, i8* %14, align 1, !tbaa !5
  %shr51 = lshr i64 %44, 8
  %conv53 = trunc i64 %shr51 to i8
  store i8 %conv53, i8* %10, align 1, !tbaa !5
  %conv56 = trunc i64 %44 to i8
  store i8 %conv56, i8* %9, align 1, !tbaa !5
  br label %"BF_cfb64_encrypt$1_latch$0"

"BF_cfb64_encrypt$1_latch$0":                     ; preds = %if.then2, %"BF_cfb64_encrypt$1_header"
  %incdec.ptr58 = getelementptr inbounds i8, i8* %2, i64 1
  %45 = load i8, i8* %2, align 1, !tbaa !5
  %idxprom = sext i32 %4 to i64
  %arrayidx60 = getelementptr inbounds i8, i8* %15, i64 %idxprom
  %46 = load i8, i8* %arrayidx60, align 1, !tbaa !5
  %xor245 = xor i8 %46, %45
  %incdec.ptr63 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %xor245, i8* %1, align 1, !tbaa !5
  store i8 %xor245, i8* %arrayidx60, align 1, !tbaa !5
  %add = add nsw i32 %4, 1
  %and66 = and i32 %add, 7
  %dec = add nsw i64 %3, -1
  %tobool1 = icmp eq i64 %3, 0
  br i1 %tobool1, label %"BF_cfb64_encrypt$1_return_from_recursive_function$0", label %"BF_cfb64_encrypt$1_increment_depth_counter"

"BF_cfb64_encrypt$1_increment_depth_counter":     ; preds = %"BF_cfb64_encrypt$1_latch$0"
  br label %"BF_cfb64_encrypt$1_recursively_call_function"

"BF_cfb64_encrypt$1_recursively_call_function":   ; preds = %"BF_cfb64_encrypt$1_increment_depth_counter"
  call void @"BF_cfb64_encrypt$1"(%0* %0, i8* %incdec.ptr63, i8* %incdec.ptr58, i64 %dec, i32 %and66, i64* %5, %struct.bf_key_st* %6, i64* %7, <2 x i64>* %8, i8* %9, i8* %10, i8* %11, i8* %12, i8* %13, i8* %14, i8* %15, i8* %16)
  ret void

"BF_cfb64_encrypt$1_return_from_recursive_function$0": ; preds = %"BF_cfb64_encrypt$1_latch$0"
  %47 = getelementptr %0, %0* %0, i32 0, i32 0
  store i32 %and66, i32* %47, align 4
  ret void
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nosync nounwind willreturn }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"int", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!7, !7, i64 0}
!7 = !{!"long", !3, i64 0}
